Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision acd6d0c4d3fed973e255a1965faa5cf9a9140cad)
+++ b/pom.xml	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
@@ -80,7 +80,23 @@
 			<groupId>org.springframework</groupId>
 			<artifactId>spring-web</artifactId>
 		</dependency>
-	</dependencies>
+        <dependency>
+            <groupId>jakarta.persistence</groupId>
+            <artifactId>jakarta.persistence-api</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.tomcat.embed</groupId>
+            <artifactId>tomcat-embed-core</artifactId>
+        </dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-autoconfigure</artifactId>
+		</dependency>
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-autoconfigure</artifactId>
+        </dependency>
+    </dependencies>
 
 	<build>
 		<plugins>
Index: src/main/java/com/bikkadIt/ElectronicStore/Controlller/CategoryController.java
===================================================================
diff --git a/src/main/java/com/bikkadIt/ElectronicStore/Controlller/CategoryController.java b/src/main/java/com/bikkadIt/ElectronicStore/Controlller/CategoryController.java
new file mode 100644
--- /dev/null	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
+++ b/src/main/java/com/bikkadIt/ElectronicStore/Controlller/CategoryController.java	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
@@ -0,0 +1,64 @@
+package com.bikkadIt.ElectronicStore.Controlller;
+
+import com.bikkadIt.ElectronicStore.dtos.ApiResponseMessage;
+import com.bikkadIt.ElectronicStore.dtos.CategoryDto;
+import com.bikkadIt.ElectronicStore.dtos.PageableResponse;
+import com.bikkadIt.ElectronicStore.service.CategoryService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+@RestController
+@RequestMapping("/categories")
+public class CategoryController {
+
+    @Autowired
+    private CategoryService categoryService;
+
+    // Create category
+    @PostMapping
+    public ResponseEntity<CategoryDto> createCategory(@RequestBody CategoryDto categoryDto) {
+        CategoryDto categoryDto1 = categoryService.create(categoryDto);
+        return new ResponseEntity<>(categoryDto1, HttpStatus.CREATED);
+    }
+
+    // Update category
+    @PutMapping("/{categoryId}")
+    public ResponseEntity<CategoryDto> updateCategory(
+            @PathVariable String categoryId,
+            @RequestBody CategoryDto categoryDto) {
+        CategoryDto updateCategory = categoryService.update(categoryDto, categoryId);
+        return new ResponseEntity<>(updateCategory, HttpStatus.OK);
+    }
+
+    // Delete category
+    @DeleteMapping("/{categoryId}")
+    public ResponseEntity<ApiResponseMessage> deleteCategory(@PathVariable String categoryId) {
+        categoryService.delete(categoryId);
+        ApiResponseMessage responseMessage = ApiResponseMessage.builder()
+                .message("Category is deleted successfully")
+                .status(HttpStatus.OK)
+                .success(true)
+                .build();
+        return new ResponseEntity<>(responseMessage, HttpStatus.OK);
+    }
+
+    // Get all categories with pagination and sorting
+    @GetMapping
+    public ResponseEntity<PageableResponse<CategoryDto>> getAll(
+            @RequestParam(value = "pageNumber", defaultValue = "0", required = false) int pageNumber,
+            @RequestParam(value = "pageSize", defaultValue = "10", required = false) int pageSize,
+            @RequestParam(value = "sortedBy", defaultValue = "title", required = false) String sortedBy,
+            @RequestParam(value = "sortDir", defaultValue = "asc", required = false) String sortDir) {
+        PageableResponse<CategoryDto> pageableResponse = categoryService.getAll(pageNumber, pageSize, sortDir, sortedBy);
+        return new ResponseEntity<>(pageableResponse, HttpStatus.OK);
+    }
+
+    // Get single category by ID
+    @GetMapping("/{categoryId}")
+    public ResponseEntity<CategoryDto> getSingle(@PathVariable String categoryId) {
+        CategoryDto categoryDto = categoryService.get(categoryId);
+        return ResponseEntity.ok(categoryDto);
+    }
+}
Index: src/main/java/com/bikkadIt/ElectronicStore/Controlller/ProductController.java
===================================================================
diff --git a/src/main/java/com/bikkadIt/ElectronicStore/Controlller/ProductController.java b/src/main/java/com/bikkadIt/ElectronicStore/Controlller/ProductController.java
new file mode 100644
--- /dev/null	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
+++ b/src/main/java/com/bikkadIt/ElectronicStore/Controlller/ProductController.java	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
@@ -0,0 +1,128 @@
+package com.bikkadIt.ElectronicStore.Controlller;
+
+import com.bikkadIt.ElectronicStore.dtos.ApiResponseMessage;
+import com.bikkadIt.ElectronicStore.dtos.ImageResponse;
+import com.bikkadIt.ElectronicStore.dtos.PageableResponse;
+import com.bikkadIt.ElectronicStore.dtos.ProductDto;
+import com.bikkadIt.ElectronicStore.service.FileService;
+import com.bikkadIt.ElectronicStore.service.ProductService;
+import jakarta.servlet.http.HttpServletResponse;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.MediaType;
+import org.springframework.http.ResponseEntity;
+import org.springframework.util.StreamUtils;
+import org.springframework.web.bind.annotation.*;
+import org.springframework.web.multipart.MultipartFile;
+
+import java.io.IOException;
+import java.io.InputStream;
+
+@RestController
+@RequestMapping("/products")
+public class ProductController {
+    @Autowired
+     private ProductService productService;
+    @Autowired
+    private FileService fileService;
+    @Value("${product.image.path}")
+    private String imagePath;
+
+    //create
+  @PostMapping
+   public ResponseEntity<ProductDto> crateProduct(@RequestBody ProductDto productDto){
+       ProductDto createProduct = productService.create(productDto);
+       return new ResponseEntity<>(createProduct, HttpStatus.CREATED);
+   }
+    //update
+    @PutMapping("/{productId}")
+    public ResponseEntity<ProductDto> updateProduct(@RequestBody ProductDto productDto,String productId) {
+        ProductDto updateProduct = productService.update(productDto, productId);
+        return new ResponseEntity<>(updateProduct, HttpStatus.OK);
+    }
+        //delete
+    @DeleteMapping("/{productId}")
+        public ResponseEntity<ApiResponseMessage>delete(@PathVariable String productId){
+           productService.delete(productId);
+        ApiResponseMessage responseMessage = ApiResponseMessage.builder()
+                .message("product is deleted")
+                .status(HttpStatus.OK).success(true).build();
+
+        return new ResponseEntity<>(responseMessage, HttpStatus.OK);
+        }
+        //get single
+    @GetMapping("/{productId}")
+        public ResponseEntity<ProductDto> getProduct(@PathVariable String productId){
+            ProductDto productDto = productService.get(productId);
+            return new ResponseEntity<>(productDto, HttpStatus.OK);
+        }
+
+    //get all
+    @GetMapping
+    public ResponseEntity<PageableResponse<ProductDto>> getAll(
+        @RequestParam(value = "pageNumber", defaultValue = "0", required = false) int pageNumber,
+        @RequestParam(value = "pageSize", defaultValue = "10", required = false) int pageSize,
+        @RequestParam(value = "sortedBy", defaultValue = "title", required = false) String sortedBy,
+        @RequestParam(value = "sortDir", defaultValue = "asc", required = false) String sortDir) {
+
+        PageableResponse<ProductDto> pageableResponse = productService.getAll(pageNumber, pageSize, sortedBy, sortDir);
+        return new ResponseEntity<>(pageableResponse,HttpStatus.OK);
+    }
+
+    //get all live
+    //  /product/live
+    @GetMapping("/live")
+    public ResponseEntity<PageableResponse<ProductDto>> getAllLive(
+            @RequestParam(value = "pageNumber", defaultValue = "0", required = false) int pageNumber,
+            @RequestParam(value = "pageSize", defaultValue = "10", required = false) int pageSize,
+            @RequestParam(value = "sortedBy", defaultValue = "title", required = false) String sortedBy,
+            @RequestParam(value = "sortDir", defaultValue = "asc", required = false) String sortDir) {
+
+        PageableResponse<ProductDto> pageableResponse = productService.getAllLive(pageNumber, pageSize, sortedBy, sortDir);
+        return new ResponseEntity<>(pageableResponse,HttpStatus.OK);
+    }
+    //get search0
+    @GetMapping("/search/{query}")
+    public ResponseEntity<PageableResponse<ProductDto>> searchProduct(
+            @PathVariable String query,
+            @RequestParam(value = "pageNumber", defaultValue = "0", required = false) int pageNumber,
+            @RequestParam(value = "pageSize", defaultValue = "10", required = false) int pageSize,
+            @RequestParam(value = "sortedBy", defaultValue = "title", required = false) String sortedBy,
+            @RequestParam(value = "sortDir", defaultValue = "asc", required = false) String sortDir) {
+
+        PageableResponse<ProductDto> pageableResponse = productService.searchByTitle(query,pageNumber, pageSize, sortedBy, sortDir);
+        return new ResponseEntity<>(pageableResponse,HttpStatus.OK);
+    }
+
+    //upload image
+    @PostMapping("/image/{productId}")
+     public ResponseEntity<ImageResponse> uploadProductImage(
+             @PathVariable String productId,
+             @RequestParam("productImage") MultipartFile image
+     ) throws IOException {
+         String fileName = fileService.uploadFile(image, imagePath);
+         ProductDto productDto = productService.get(productId);
+         productDto.setProductImageName(fileName);
+         ProductDto updatedProduct = productService.update(productDto, productId);
+
+         ImageResponse  response = ImageResponse.builder()
+                 .imageName(updatedProduct.getProductImageName())
+                 .message("Product image is successfully uploaded !!")
+                 .status(HttpStatus.CREATED).success(true).build();
+
+         return new ResponseEntity<>(response,HttpStatus.CREATED);
+     }
+     //serve image
+    @GetMapping(value = "/image/{productId}")
+    public void serveUserImage(@PathVariable String productId, HttpServletResponse response) throws IOException {
+        ProductDto productDto = productService.get(productId);
+
+        InputStream resource = fileService.getResource(imagePath, productDto.getProductImageName());
+        response.setContentType(MediaType.IMAGE_JPEG_VALUE);
+        StreamUtils.copy(resource,response.getOutputStream());
+
+    }
+
+
+}
Index: src/main/java/com/bikkadIt/ElectronicStore/Controlller/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/bikkadIt/ElectronicStore/Controlller/UserController.java b/src/main/java/com/bikkadIt/ElectronicStore/Controlller/UserController.java
--- a/src/main/java/com/bikkadIt/ElectronicStore/Controlller/UserController.java	(revision acd6d0c4d3fed973e255a1965faa5cf9a9140cad)
+++ b/src/main/java/com/bikkadIt/ElectronicStore/Controlller/UserController.java	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
@@ -1,15 +1,26 @@
 package com.bikkadIt.ElectronicStore.Controlller;
 
 import com.bikkadIt.ElectronicStore.dtos.ApiResponseMessage;
+import com.bikkadIt.ElectronicStore.dtos.ImageResponse;
 import com.bikkadIt.ElectronicStore.dtos.PageableResponse;
 import com.bikkadIt.ElectronicStore.dtos.UserDto;
+import com.bikkadIt.ElectronicStore.service.FileService;
 import com.bikkadIt.ElectronicStore.service.UserService;
+import jakarta.servlet.http.HttpServletResponse;
 import jakarta.validation.Valid;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Value;
 import org.springframework.http.HttpStatus;
+import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
+import org.springframework.util.StreamUtils;
 import org.springframework.web.bind.annotation.*;
+import org.springframework.web.multipart.MultipartFile;
 
+import java.io.IOException;
+import java.io.InputStream;
 import java.util.List;
 
 @RestController
@@ -18,6 +29,14 @@
 
     @Autowired
     private UserService userService;
+    @Autowired
+    private FileService fileService;
+
+    @Value("${user.profile.image.path}")
+    private String  imageUploadPath;
+
+    private Logger logger = LoggerFactory.getLogger(UserController.class);
+
     //create
     @PostMapping
     public ResponseEntity<UserDto> createUser(@Valid @RequestBody UserDto userDto){
@@ -76,6 +95,40 @@
     @GetMapping("/search/{keywords}")
     public ResponseEntity<List<UserDto>> searchUser(@PathVariable("keywords") String keywords){
         List<UserDto> dtos = userService.searchUser(keywords);
-        return new ResponseEntity<>(dtos, HttpStatus.OK);
+        return new ResponseEntity<>(dtos, HttpStatus.CREATED);
+    }
+    //upload user image
+    @PostMapping("/image/{userId}")
+    public ResponseEntity<ImageResponse> uploadUserImage
+    (@RequestParam("userImage")MultipartFile image, @PathVariable String userId) throws IOException {
+       String imageName = fileService.uploadFile(image ,imageUploadPath);
+        UserDto user = userService.getUserById(userId);
+
+        user.setImageName(imageName);
+        UserDto userDto = userService.updateUser(user,userId);
+        ImageResponse imageResponse = ImageResponse.builder()
+                .imageName(imageName)
+                .success(true)
+                .status(HttpStatus.CREATED)
+                .build();
+        return new ResponseEntity<>(HttpStatus.OK);
     }
+    //serve user image
+@GetMapping("/image/{userId}")
+    public void setUserImage(@PathVariable String userId, HttpServletResponse response) throws IOException {
+        UserDto user  = userService.getUserById(userId);
+        logger.info("user image name : {} ", user.getImageName());
+        InputStream resource = fileService.getResource(imageUploadPath, user.getImageName());
+        response.setContentType(MediaType.IMAGE_JPEG_VALUE);
+         StreamUtils.copy(resource,response.getOutputStream());
+
+    }
+    //upload post image
+//    public String uploadPostImage(@RequestParam MultipartFile image, @PathVariable String userId){
+//        UserDto userById = this.userService.getUserById(userId);
+//
+//
+//    }
+
+
 }
Index: src/main/java/com/bikkadIt/ElectronicStore/dtos/CategoryDto.java
===================================================================
diff --git a/src/main/java/com/bikkadIt/ElectronicStore/dtos/CategoryDto.java b/src/main/java/com/bikkadIt/ElectronicStore/dtos/CategoryDto.java
new file mode 100644
--- /dev/null	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
+++ b/src/main/java/com/bikkadIt/ElectronicStore/dtos/CategoryDto.java	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
@@ -0,0 +1,23 @@
+package com.bikkadIt.ElectronicStore.dtos;
+
+import jakarta.validation.constraints.Min;
+import jakarta.validation.constraints.NotBlank;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+@Getter
+@Setter
+@AllArgsConstructor
+@NoArgsConstructor
+public class CategoryDto {
+    private String catagoryId;
+@NotBlank
+@Min(value = 4,message = "tithle must be of minimum 4 charecher !!")
+    private String title;
+ @NotBlank(message = "Description required ")
+    private String description;
+
+    private String coverImage;
+}
Index: src/main/java/com/bikkadIt/ElectronicStore/dtos/ImageResponse.java
===================================================================
diff --git a/src/main/java/com/bikkadIt/ElectronicStore/dtos/ImageResponse.java b/src/main/java/com/bikkadIt/ElectronicStore/dtos/ImageResponse.java
new file mode 100644
--- /dev/null	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
+++ b/src/main/java/com/bikkadIt/ElectronicStore/dtos/ImageResponse.java	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
@@ -0,0 +1,17 @@
+package com.bikkadIt.ElectronicStore.dtos;
+
+import lombok.*;
+import org.springframework.http.HttpStatus;
+
+@Getter
+@Setter
+@AllArgsConstructor
+@NoArgsConstructor
+@Builder
+public class ImageResponse {
+    private String imageName;
+
+    private String message;
+    private boolean success;
+    private HttpStatus status;
+}
Index: src/main/java/com/bikkadIt/ElectronicStore/dtos/ProductDto.java
===================================================================
diff --git a/src/main/java/com/bikkadIt/ElectronicStore/dtos/ProductDto.java b/src/main/java/com/bikkadIt/ElectronicStore/dtos/ProductDto.java
new file mode 100644
--- /dev/null	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
+++ b/src/main/java/com/bikkadIt/ElectronicStore/dtos/ProductDto.java	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
@@ -0,0 +1,24 @@
+package com.bikkadIt.ElectronicStore.dtos;
+
+import lombok.*;
+
+import java.util.Date;
+
+@AllArgsConstructor
+@NoArgsConstructor
+@Setter
+@Getter
+@ToString
+public class ProductDto {
+    private String productId;
+    private String title;
+    private String description;
+    private int price;
+    private int quantity;
+    private int discountedPrice;
+    private Date addedDate;
+    private boolean live;
+    private boolean inStock;
+    private String productImageName;
+
+}
Index: src/main/java/com/bikkadIt/ElectronicStore/entity/Category.java
===================================================================
diff --git a/src/main/java/com/bikkadIt/ElectronicStore/entity/Category.java b/src/main/java/com/bikkadIt/ElectronicStore/entity/Category.java
new file mode 100644
--- /dev/null	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
+++ b/src/main/java/com/bikkadIt/ElectronicStore/entity/Category.java	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
@@ -0,0 +1,30 @@
+package com.bikkadIt.ElectronicStore.entity;
+
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+import java.util.ArrayList;
+import java.util.List;
+
+@Getter
+@Setter
+@AllArgsConstructor
+@NoArgsConstructor
+@Entity
+@Table(name ="catagory")
+public class Category {
+    @Id
+    @Column(name = "id")
+    private String catagoryId;
+   @Column(name = "catagory_title", length = 60,nullable = false)
+    private String title;
+   @Column(name = "catagory_desc", length = 500)
+    private String description;
+    private String coverImage;
+ //other attributes if you
+   @OneToMany(mappedBy = "category",cascade = CascadeType.ALL,fetch = FetchType.LAZY)
+   private List<Product> products = new ArrayList<>();
+}
Index: src/main/java/com/bikkadIt/ElectronicStore/entity/Product.java
===================================================================
diff --git a/src/main/java/com/bikkadIt/ElectronicStore/entity/Product.java b/src/main/java/com/bikkadIt/ElectronicStore/entity/Product.java
new file mode 100644
--- /dev/null	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
+++ b/src/main/java/com/bikkadIt/ElectronicStore/entity/Product.java	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
@@ -0,0 +1,35 @@
+package com.bikkadIt.ElectronicStore.entity;
+
+
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+import java.util.Date;
+
+@Setter
+@Getter
+@AllArgsConstructor
+@NoArgsConstructor
+@Entity // data ko store karne ke liye
+@Table(name = "Products")// create a table name or table
+public class Product {
+    @Id
+    private String productId;
+    private String title;
+    @Column(length = 10000)
+    private String description;
+    private int price;
+    private int quantity;
+    private int discountedPrice;
+    private Date addedDate;
+    private boolean live;
+    private boolean inStock;
+    private String productImageName;
+    @ManyToOne(fetch = FetchType.EAGER)
+    @JoinColumn(name="category")
+    private Category category;
+
+}
Index: src/main/java/com/bikkadIt/ElectronicStore/exception/BadApiRequest.java
===================================================================
diff --git a/src/main/java/com/bikkadIt/ElectronicStore/exception/BadApiRequest.java b/src/main/java/com/bikkadIt/ElectronicStore/exception/BadApiRequest.java
new file mode 100644
--- /dev/null	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
+++ b/src/main/java/com/bikkadIt/ElectronicStore/exception/BadApiRequest.java	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
@@ -0,0 +1,11 @@
+package com.bikkadIt.ElectronicStore.exception;
+
+public class BadApiRequest extends RuntimeException {
+
+   public BadApiRequest(String message){
+       super(message);
+   }
+   public BadApiRequest(){
+       super("Bad Request");
+   }
+}
Index: src/main/java/com/bikkadIt/ElectronicStore/exception/GlobalExceptionHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/bikkadIt/ElectronicStore/exception/GlobalExceptionHandler.java b/src/main/java/com/bikkadIt/ElectronicStore/exception/GlobalExceptionHandler.java
--- a/src/main/java/com/bikkadIt/ElectronicStore/exception/GlobalExceptionHandler.java	(revision acd6d0c4d3fed973e255a1965faa5cf9a9140cad)
+++ b/src/main/java/com/bikkadIt/ElectronicStore/exception/GlobalExceptionHandler.java	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
@@ -46,4 +46,15 @@
 
         return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
     }
-}
+
+    @ExceptionHandler(BadApiRequest.class)
+    public ResponseEntity<ApiResponseMessage> handleBadApiRequest(BadApiRequest ex) {
+        logger.info("Exception Handler invoked");
+        ApiResponseMessage response = ApiResponseMessage.builder()
+                .message(ex.getMessage())
+                .status(HttpStatus.BAD_REQUEST)
+                .success(false)
+                .build();
+        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
+    }
+}
\ No newline at end of file
Index: src/main/java/com/bikkadIt/ElectronicStore/helper/Helper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/bikkadIt/ElectronicStore/helper/Helper.java b/src/main/java/com/bikkadIt/ElectronicStore/helper/Helper.java
--- a/src/main/java/com/bikkadIt/ElectronicStore/helper/Helper.java	(revision acd6d0c4d3fed973e255a1965faa5cf9a9140cad)
+++ b/src/main/java/com/bikkadIt/ElectronicStore/helper/Helper.java	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
@@ -9,9 +9,10 @@
 
 public class Helper {
 
-    private ModelMapper modelMapper = new ModelMapper(); // Declare ModelMapper as a class-level variable to avoid recreating it each time.
+    private static ModelMapper modelMapper = new ModelMapper(); // Declare ModelMapper as a class-level variable to avoid recreating it each time.
 
-    public <U, V> PageableResponse<V> getPageableResponse(Page<U> page, Class<V> type) {
+
+    public static <U, V> PageableResponse<V> getPageableResponse(Page<U> page, Class<V> type) {
         // Get the list of entities (U)
         List<U> entity = page.getContent();
 
Index: src/main/java/com/bikkadIt/ElectronicStore/repository/CategoryRepository.java
===================================================================
diff --git a/src/main/java/com/bikkadIt/ElectronicStore/repository/CategoryRepository.java b/src/main/java/com/bikkadIt/ElectronicStore/repository/CategoryRepository.java
new file mode 100644
--- /dev/null	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
+++ b/src/main/java/com/bikkadIt/ElectronicStore/repository/CategoryRepository.java	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
@@ -0,0 +1,8 @@
+package com.bikkadIt.ElectronicStore.repository;
+
+import com.bikkadIt.ElectronicStore.entity.Category;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface CategoryRepository extends JpaRepository<Category,String> {
+
+}
Index: src/main/java/com/bikkadIt/ElectronicStore/repository/ProductRepository.java
===================================================================
diff --git a/src/main/java/com/bikkadIt/ElectronicStore/repository/ProductRepository.java b/src/main/java/com/bikkadIt/ElectronicStore/repository/ProductRepository.java
new file mode 100644
--- /dev/null	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
+++ b/src/main/java/com/bikkadIt/ElectronicStore/repository/ProductRepository.java	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
@@ -0,0 +1,17 @@
+package com.bikkadIt.ElectronicStore.repository;
+
+import com.bikkadIt.ElectronicStore.entity.Product;
+import org.springframework.data.domain.Page;
+import org.springframework.data.domain.Pageable;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface ProductRepository extends JpaRepository<Product,String> {
+
+        //search
+    org.springframework.data.domain.Page<Product> findByTitleContaining(String subTitle, Pageable pageable);
+    Page<Product> findByLiveTrue(Pageable pageable);
+
+    // other methods
+    //custome finder method
+    // query method
+}
Index: src/main/java/com/bikkadIt/ElectronicStore/service/CategoryService.java
===================================================================
diff --git a/src/main/java/com/bikkadIt/ElectronicStore/service/CategoryService.java b/src/main/java/com/bikkadIt/ElectronicStore/service/CategoryService.java
new file mode 100644
--- /dev/null	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
+++ b/src/main/java/com/bikkadIt/ElectronicStore/service/CategoryService.java	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
@@ -0,0 +1,25 @@
+package com.bikkadIt.ElectronicStore.service;
+
+import com.bikkadIt.ElectronicStore.dtos.CategoryDto;
+import com.bikkadIt.ElectronicStore.dtos.PageableResponse;
+
+public interface CategoryService {
+    //create
+    CategoryDto create(CategoryDto categoryDto);
+
+    //update
+    CategoryDto update(CategoryDto categoryDto, String catagoryId);
+
+    //delete
+    void delete(String categoryId);
+
+    //getALl
+    PageableResponse<CategoryDto> getAll();
+
+     PageableResponse<CategoryDto> getAll(int pageNumber, int pageSize, String sortBy);
+
+    //get single catagory detail
+    CategoryDto get(String categoryId);
+
+    PageableResponse<CategoryDto> getAll(int pageNumber, int pageSize, String sortDir, String sortedBy);
+}
Index: src/main/java/com/bikkadIt/ElectronicStore/service/FileService.java
===================================================================
diff --git a/src/main/java/com/bikkadIt/ElectronicStore/service/FileService.java b/src/main/java/com/bikkadIt/ElectronicStore/service/FileService.java
new file mode 100644
--- /dev/null	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
+++ b/src/main/java/com/bikkadIt/ElectronicStore/service/FileService.java	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
@@ -0,0 +1,18 @@
+package com.bikkadIt.ElectronicStore.service;
+
+import org.springframework.stereotype.Service;
+import org.springframework.web.multipart.MultipartFile;
+
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+@Service
+public interface FileService {
+
+    public String uploadFile(MultipartFile file, String path) throws IOException;
+
+    InputStream getResource(String path, String name) throws FileNotFoundException;
+
+    //InputStream getResource(String path, String name) throws FileNotFoundException;
+
+}
Index: src/main/java/com/bikkadIt/ElectronicStore/service/ProductService.java
===================================================================
diff --git a/src/main/java/com/bikkadIt/ElectronicStore/service/ProductService.java b/src/main/java/com/bikkadIt/ElectronicStore/service/ProductService.java
new file mode 100644
--- /dev/null	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
+++ b/src/main/java/com/bikkadIt/ElectronicStore/service/ProductService.java	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
@@ -0,0 +1,31 @@
+package com.bikkadIt.ElectronicStore.service;
+
+import com.bikkadIt.ElectronicStore.dtos.PageableResponse;
+import com.bikkadIt.ElectronicStore.dtos.ProductDto;
+
+public interface ProductService {
+    //create
+   ProductDto create(ProductDto productDto);
+
+    //update
+ ProductDto update(ProductDto productDto, String productId);
+
+//    ProductDto update(String productId, ProductDto productDto);
+
+    //delete
+ void delete(String productId);
+
+    //get single
+   ProductDto get(String productId);
+
+   //get all
+    PageableResponse<ProductDto> getAll(int pageNumber, int pageSize, String sortBy, String Dir);
+
+    //get all : live
+    PageableResponse<ProductDto> getAllLive(int pageNumber, int pageSize, String sortBy, String Dir);
+
+    //search product
+    PageableResponse<ProductDto> searchByTitle(String subTitle,int pageNumber, int pageSize, String sortBy, String Dir);
+
+    //other method
+}
Index: src/main/java/com/bikkadIt/ElectronicStore/service/impl/CategoryServiceImpl.java
===================================================================
diff --git a/src/main/java/com/bikkadIt/ElectronicStore/service/impl/CategoryServiceImpl.java b/src/main/java/com/bikkadIt/ElectronicStore/service/impl/CategoryServiceImpl.java
new file mode 100644
--- /dev/null	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
+++ b/src/main/java/com/bikkadIt/ElectronicStore/service/impl/CategoryServiceImpl.java	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
@@ -0,0 +1,94 @@
+package com.bikkadIt.ElectronicStore.service.impl;
+
+import com.bikkadIt.ElectronicStore.dtos.CategoryDto;
+import com.bikkadIt.ElectronicStore.dtos.PageableResponse;
+import com.bikkadIt.ElectronicStore.entity.Category;
+import com.bikkadIt.ElectronicStore.exception.ResourceNotFoundException;
+import com.bikkadIt.ElectronicStore.helper.Helper;
+import com.bikkadIt.ElectronicStore.repository.CategoryRepository;
+import com.bikkadIt.ElectronicStore.service.CategoryService;
+import org.modelmapper.ModelMapper;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.data.domain.Page;
+import org.springframework.data.domain.PageRequest;
+import org.springframework.data.domain.Pageable;
+import org.springframework.data.domain.Sort;
+import org.springframework.stereotype.Service;
+
+import java.util.UUID;
+
+@Service
+public class CategoryServiceImpl implements CategoryService {
+
+    @Autowired
+    private CategoryRepository categoryRepository;
+
+    @Autowired
+    private ModelMapper mapper;
+
+    @Override
+    public CategoryDto create(CategoryDto categoryDto) {
+  //creating categoryId:randomly
+        String categoryId = UUID.randomUUID().toString();
+        categoryDto.setCatagoryId(categoryId);
+
+        Category category = mapper.map(categoryDto, Category.class);
+        Category savedCategory = categoryRepository.save(category);
+        return mapper.map(savedCategory, CategoryDto.class);
+    }
+
+    @Override
+    public CategoryDto update(CategoryDto categoryDto, String categoryId) {
+        // get category by id
+        Category category = categoryRepository.findById(categoryId)
+                .orElseThrow(() -> new ResourceNotFoundException("Category not found with id: " + categoryId));
+
+        // update category details
+        category.setTitle(categoryDto.getTitle());
+        category.setDescription(categoryDto.getDescription());
+        category.setCoverImage(categoryDto.getCoverImage());
+
+        Category updatedCategory = categoryRepository.save(category);
+        return mapper.map(updatedCategory, CategoryDto.class);
+    }
+
+    @Override
+    public void delete(String categoryId) {
+        Category category = categoryRepository.findById(categoryId)
+                .orElseThrow(() -> new ResourceNotFoundException("Category not found with id: " + categoryId));
+
+        categoryRepository.delete(category);
+    }
+
+    @Override
+    public PageableResponse<CategoryDto> getAll() {
+        return null;
+    }
+
+    @Override
+    public PageableResponse<CategoryDto> getAll(int pageNumber, int pageSize, String sortBy) {
+        Sort sort = (sortBy.equalsIgnoreCase("desc")) ?
+                Sort.by(sortBy).descending() :
+                Sort.by(sortBy).ascending();
+
+        Pageable pageable = PageRequest.of(pageNumber, pageSize, sort);
+        Page<Category> page = categoryRepository.findAll(pageable);
+
+        PageableResponse<CategoryDto> pageableResponse = Helper.getPageableResponse(page, CategoryDto.class);
+
+        return pageableResponse;  // Now returning the correct response
+    }
+
+    @Override
+    public CategoryDto get(String categoryId) {
+        Category category = categoryRepository.findById(categoryId)
+                .orElseThrow(() -> new ResourceNotFoundException("Category not found with id: " + categoryId));
+
+        return mapper.map(category, CategoryDto.class);
+    }
+
+    @Override
+    public PageableResponse<CategoryDto> getAll(int pageNumber, int pageSize, String sortDir, String sortedBy) {
+        return null;
+    }
+}
Index: src/main/java/com/bikkadIt/ElectronicStore/service/impl/FileServiceImpl.java
===================================================================
diff --git a/src/main/java/com/bikkadIt/ElectronicStore/service/impl/FileServiceImpl.java b/src/main/java/com/bikkadIt/ElectronicStore/service/impl/FileServiceImpl.java
new file mode 100644
--- /dev/null	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
+++ b/src/main/java/com/bikkadIt/ElectronicStore/service/impl/FileServiceImpl.java	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
@@ -0,0 +1,93 @@
+package com.bikkadIt.ElectronicStore.service.impl;
+
+import com.bikkadIt.ElectronicStore.service.FileService;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.stereotype.Service;
+import org.springframework.web.multipart.MultipartFile;
+
+import java.io.*;
+import java.nio.file.Files;
+import java.nio.file.Paths;
+import java.util.UUID;
+
+@Service
+public class FileServiceImpl implements FileService {
+
+    private Logger logger = LoggerFactory.getLogger(FileServiceImpl.class);
+
+    @Override
+    public String uploadFile(MultipartFile file, String path) throws IOException {
+        // Validate file input
+        if (file == null || file.isEmpty()) {
+            throw new IllegalArgumentException("File is empty or not provided.");
+        }
+
+        // Validate and sanitize the original file name
+        String originalFileName = file.getOriginalFilename();
+        if (originalFileName == null) {
+            throw new IllegalArgumentException("Original file name is null.");
+        }
+        String safeFileName = originalFileName.replaceAll("[^a-zA-Z0-9\\.\\-]", "_");
+
+        // Generate a unique file name
+        String filename = UUID.randomUUID().toString();
+        String fileName = filename.concat(safeFileName.substring(safeFileName.lastIndexOf(".")));
+
+        // Create directories if they don't exist
+        File dir = new File(path);
+        if (!dir.exists()) {
+            dir.mkdirs();
+        }
+
+        // Save the file to the specified path
+        String filepath = path + File.separator + fileName;
+        try {
+            Files.copy(file.getInputStream(), Paths.get(filepath));
+        } catch (IOException e) {
+            logger.error("Failed to save the file: {}", e.getMessage());
+            throw new IOException("Could not save file: " + fileName, e);
+        }
+
+        logger.info("File uploaded successfully: {}", fileName);
+        return fileName;
+    }
+
+      //   Files.copy(file.getInputStream(), Paths.get(filepath));
+        // return fileName;
+//        //String extention = "";
+//        int lastIndexOfDot = originalFileName.lastIndexOf(".");
+//        if (lastIndexOfDot != -1) {
+//            extention = originalFileName.substring(lastIndexOfDot);
+//        } else {
+//            throw new BadApiRequest("Invalid file format! File must have an extension.");
+//        }
+//
+//        String fileNameWithExtension = filename + extention;
+//        String fullPathWithFilename = path + fileNameWithExtension;
+//          logger.info("full image path: {}" , fullPathWithFilename);
+//        if (extention.equalsIgnoreCase(".png") ||
+//                extention.equalsIgnoreCase(".jpg") ||
+//                extention.equalsIgnoreCase(".jpeg")) {
+//            logger.info("file extention is {}",extention);
+//            File folder = new File(path);
+//            if (!folder.exists()) {
+//                folder.mkdirs(); // create the folder if it doesn't exist
+//            }
+//
+//            // Upload the file
+//            Files.copy(file.getInputStream(), Paths.get(fullPathWithFilename), StandardCopyOption.REPLACE_EXISTING);
+//
+//            return fileNameWithExtension;
+//        } else {
+//            throw new BadApiRequest("File with extension " + extention + " not allowed!");
+//        }
+
+
+
+    @Override
+    public InputStream getResource(String path, String name) throws FileNotFoundException {
+        String fullpath = path+ name;
+        return new FileInputStream(fullpath);
+    }
+}
Index: src/main/java/com/bikkadIt/ElectronicStore/service/impl/ProductServiceImpl.java
===================================================================
diff --git a/src/main/java/com/bikkadIt/ElectronicStore/service/impl/ProductServiceImpl.java b/src/main/java/com/bikkadIt/ElectronicStore/service/impl/ProductServiceImpl.java
new file mode 100644
--- /dev/null	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
+++ b/src/main/java/com/bikkadIt/ElectronicStore/service/impl/ProductServiceImpl.java	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
@@ -0,0 +1,111 @@
+package com.bikkadIt.ElectronicStore.service.impl;
+
+import com.bikkadIt.ElectronicStore.dtos.PageableResponse;
+import com.bikkadIt.ElectronicStore.dtos.ProductDto;
+import com.bikkadIt.ElectronicStore.entity.Product;
+import com.bikkadIt.ElectronicStore.exception.ResourceNotFoundException;
+import com.bikkadIt.ElectronicStore.helper.Helper;
+import com.bikkadIt.ElectronicStore.repository.ProductRepository;
+import com.bikkadIt.ElectronicStore.service.ProductService;
+import org.modelmapper.ModelMapper;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.data.domain.Page;
+import org.springframework.data.domain.PageRequest;
+import org.springframework.data.domain.Pageable;
+import org.springframework.data.domain.Sort;
+import org.springframework.stereotype.Service;
+
+import java.util.Date;
+import java.util.UUID;
+@Service
+public class ProductServiceImpl implements ProductService {
+    @Autowired
+    private ProductRepository productRepository;
+    @Autowired
+    private ModelMapper mapper;
+//    private String sortDir;
+//    private String productId;
+
+
+    //Other dependancy
+    @Override
+    public ProductDto create(ProductDto productDto) {
+        Product product = mapper.map(productDto, Product.class);
+        // product id
+        String productId = UUID.randomUUID().toString();
+        product.setProductId(productId);
+        //added
+        product.setAddedDate(new Date());
+       Product saveProduct = productRepository.save(product);
+
+        return mapper.map(saveProduct,ProductDto.class);
+    }
+
+    @Override
+    public ProductDto update(ProductDto productDto, String productId) {
+        if (productId == null || productId.trim().isEmpty()) {
+            throw new IllegalArgumentException("Product ID must not be null or empty");
+        }
+
+
+
+        Product existingProduct = productRepository.findById(productId).
+            orElseThrow(()-> new ResourceNotFoundException("Product not found with Id :" +productId));
+
+        existingProduct.setProductId(productDto.getProductId());
+        existingProduct.setDescription(productDto.getDescription());
+        existingProduct.setPrice(productDto.getPrice());
+        existingProduct.setQuantity(productDto.getQuantity());
+        existingProduct.setDiscountedPrice(productDto.getDiscountedPrice());
+        existingProduct.setLive(productDto.isLive());
+        existingProduct.setInStock(productDto.isInStock());
+        existingProduct.setProductImageName(productDto.getProductImageName());
+
+
+
+        //save the entity
+        Product updateProduct = productRepository.save(existingProduct);
+        return mapper.map(updateProduct,ProductDto.class);
+    }
+
+
+    @Override
+    public void delete(String productId) {
+        Product existingProduct = productRepository.findById(productId)
+                .orElseThrow(()-> new ResourceNotFoundException("Product not found with id:" + productId));
+        productRepository.delete(existingProduct);
+    }
+
+    @Override
+    public ProductDto get(String productId) {
+        Product product = productRepository.findById(productId)
+                .orElseThrow(()->new ResourceNotFoundException("Product is the missing :" +productId));
+        return mapper.map(product, ProductDto.class);
+    }
+
+    @Override
+    public PageableResponse<ProductDto> getAll(int pageNumber, int pageSize, String sortBy, String sortDir) {
+       Sort sort =(sortDir.equalsIgnoreCase("desc"))? (Sort.by(sortBy).descending()):(Sort.by(sortBy).ascending());
+        Pageable pageable = PageRequest.of(pageNumber, pageSize,sort);
+        Page<Product> page = productRepository.findAll(pageable);
+        return Helper.getPageableResponse(page,ProductDto.class);
+    }
+
+    @Override
+    public PageableResponse<ProductDto> getAllLive(int pageNumber, int pageSize, String sortBy, String sortDir) {
+        Sort sort =(sortDir.equalsIgnoreCase("desc"))? (Sort.by(sortBy).descending()):(Sort.by(sortBy).ascending());
+        Pageable pageable = PageRequest.of(pageNumber, pageSize,sort);
+        Page<Product> page = productRepository.findByLiveTrue(pageable);
+        return Helper.getPageableResponse(page,ProductDto.class);
+
+    }
+
+    @Override
+    public PageableResponse<ProductDto> searchByTitle(String subTitle,int pageNumber, int pageSize, String sortBy, String sortDir) {
+        Sort sort =(sortDir.equalsIgnoreCase("desc"))? (Sort.by(sortBy).descending()):(Sort.by(sortBy).ascending());
+        Pageable pageable = PageRequest.of(pageNumber, pageSize,sort);
+        Page<Product> page = productRepository.findByTitleContaining(subTitle,pageable);
+        return Helper.getPageableResponse(page,ProductDto.class);
+
+    }
+}
Index: src/main/java/com/bikkadIt/ElectronicStore/service/impl/UserServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/bikkadIt/ElectronicStore/service/impl/UserServiceImpl.java b/src/main/java/com/bikkadIt/ElectronicStore/service/impl/UserServiceImpl.java
--- a/src/main/java/com/bikkadIt/ElectronicStore/service/impl/UserServiceImpl.java	(revision acd6d0c4d3fed973e255a1965faa5cf9a9140cad)
+++ b/src/main/java/com/bikkadIt/ElectronicStore/service/impl/UserServiceImpl.java	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
@@ -7,14 +7,21 @@
 import com.bikkadIt.ElectronicStore.repository.UseRepository;
 import com.bikkadIt.ElectronicStore.service.UserService;
 import org.modelmapper.ModelMapper;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Value;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.PageRequest;
 import org.springframework.data.domain.Pageable;
 import org.springframework.data.domain.Sort;
 import org.springframework.stereotype.Service;
 
-import java.awt.print.PageFormat;
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.NoSuchFileException;
+import java.nio.file.Path;
+import java.nio.file.Paths;
 import java.util.List;
 import java.util.UUID;
 import java.util.stream.Collectors;
@@ -26,10 +33,15 @@
     @Autowired
     private ModelMapper mapper;
 
-    public UserServiceImpl(UseRepository useRepository, ModelMapper mapper) {
-        this.useRepository = useRepository;
-        this.mapper = mapper;
-    }
+      @Value("${user.profile.image.path}")
+    private  String imagePath;
+
+      private Logger logger = LoggerFactory.getLogger(UserServiceImpl.class);
+
+//    public UserServiceImpl(UseRepository useRepository, ModelMapper mapper) {
+//        this.useRepository = useRepository;
+//        this.mapper = mapper;
+//    }
 
 
     @Override
@@ -40,13 +52,25 @@
         User user = dtoToEntity(userDto);
         User savedUser = useRepository.save(user);
         // entity -->dto
-        return entityToDto(savedUser);
+        UserDto newDto = entityToDto(savedUser);
+        return newDto;
     }
 
     @Override
     public void deleteUser(String userId) {
         User user = useRepository.findById(userId).orElseThrow(()->new ResourceNotFoundException("this is user Repository"));
-        this.useRepository.delete(user);
+        //this.useRepository.delete(user);
+
+        String fullPath= imagePath + user.getImageName();
+        try {
+            Path path = Paths.get(fullPath);
+                Files.delete(path);
+            } catch (NoSuchFileException ex) {
+                logger.info("User_Image not found Foldre");
+                ex.printStackTrace();
+        }catch (IOException ex){
+            ex.printStackTrace();
+        }
     }
 
     @Override
Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
--- a/src/main/resources/application.properties	(revision acd6d0c4d3fed973e255a1965faa5cf9a9140cad)
+++ b/src/main/resources/application.properties	(revision 2fb5e139afea1d09a0d069f90b41be5cd71c16e4)
@@ -8,3 +8,12 @@
 spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
 spring.jpa.show-sql=true
 spring.jpa.hibernate.ddl-auto=update
+# file releted all configuration
+
+spring.servlet.multipart.max-file-size =10MB
+spring.servlet.multipart.max-request-size=10MB
+
+
+#path config
+user.profile.image.path =images/users/
+product.image.path =images/products/
\ No newline at end of file
diff --git a/javaFirst b/javaFirst
deleted file mode 100644
index 8cb8e238850c148d0fc1975411530655f6560230..0000000000000000000000000000000000000000
GIT binary patch
literal 0
Hc$@<O00001

